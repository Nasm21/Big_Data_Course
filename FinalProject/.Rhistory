, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0
, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1
, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1
, 1, 0, 0, 0, 0, 1, 0, 0,0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0,
0, 1, 0,0, 0, 0, 0, 1, 0, 0, 0, 1, 1))
matematicas <- c(41, 53, 54, 47, 57, 51, 42, 45, 54, 52, 51, 51, 71, 57,
50, 43, 51, 60, 62, 57, 35, 75, 45, 57, 45, 46, 66, 57, 49, 49, 57, 64,
63, 57, 50, 58, 75, 68, 44, 40, 41, 62, 57, 43, 48, 63, 39, 70, 63, 59, 61,
38, 61, 49, 73, 44, 42, 39, 55, 52, 45, 61, 39, 41, 50, 40, 60, 47, 59,
49, 46, 58, 71, 58, 46, 43, 54, 56, 46, 54,57, 54, 71, 48, 40, 64, 51
, 39, 40, 61, 66, 49, 65, 52, 46, 61, 72, 71, 40, 69, 64, 56, 49, 54, 53
, 66, 67, 40, 46, 69, 40, 41, 57, 58, 57, 37, 55, 62, 64, 40, 50, 46, 53
, 52, 45, 56, 45, 54, 56, 41, 54, 72, 56, 47, 49, 60, 54, 55, 33, 49, 43
, 50, 52, 48, 58, 43, 41, 43, 46, 44, 43, 61, 40, 49, 56, 61, 50, 51, 42
, 67, 53, 50, 51, 72, 48, 40, 53, 39, 63, 51, 45, 39, 42, 62, 44, 65, 63
, 54, 45, 60, 49, 48, 57, 55, 66, 64, 55, 42, 56, 53, 41, 42, 53, 42, 60
, 52, 38, 57, 58, 65)
datos <- data.frame(matricula, matematicas)
nuevos_puntos <- seq(from = min(datos$matematicas), to = max(datos
$matematicas), by = 0.5)
library(tidyverse)
library(ISLR) #Contiene datasets del libro
#"An Introduction to Statistical Learning with
#Applications in R"
library(dplyr)
# Se recodifican los niveles No, Yes a 1 y 0
Default <- Default %>%
select(default, balance) %>%
mutate(default = recode(default,
"No"  = 0,
"Yes" = 1))
head(Default)
#La Regresión Logística Simple, desarrollada por
#David Cox en 1958, es un método de regresión que permite
#estimar la probabilidad de una variable cualitativa binaria
#en función de una variable cuantitativa. Una de las principales
#aplicaciones de la regresión logística es la de clasificación
#binaria, en el que las observaciones se clasifican en un grupo
#u otro dependiendo del valor que tome la variable empleada
#como predictor. Por ejemplo, clasificar a un individuo
#desconocido como hombre o mujer en función del tamaño de la
#mandíbula.
library(tidyverse)
library(ISLR) #Contiene datasets del libro
#"An Introduction to Statistical Learning with
#Applications in R"
library(dplyr)
data("Default") #Un conjunto de datos simulado que contiene
#información sobre diez mil clientes. El objetivo aquí es
#predecir qué clientes incumplirán con su deuda de tarjeta
#de crédito.
#default: Un factor con niveles No y Sí que indica si el
#cliente incumplió con su deuda.
#student: Un factor con niveles No y Sí que indica si el
#cliente es estudiante.
#balance: El saldo promedio que el cliente tiene pendiente
#en su tarjeta de crédito después de realizar su pago mensual.
#income: Ingresos del cliente.
head(Default)
# Se recodifican los niveles No, Yes a 1 y 0
Default <- Default %>%
select(default, balance) %>%
mutate(default = recode(default,
"No"  = 0,
"Yes" = 1))
head(Default)
# Ajuste de un modelo lineal por mínimos cuadrados.
modelo_lineal <- lm(default ~ balance, data = Default)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")
predict(object = modelo_lineal,
newdata = data.frame(balance = 10000))
library(dplyr)
library(ggplot2)
library(dslabs)
data(murders)
#Gráfico de dispersión
murders %>% ggplot(aes(x = log10(population/10^6),
y = log10(total),color=region,shape=region)) +
geom_point(show.legend = FALSE)+ xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010")+
facet_wrap(~ region, nrow = 2)
murders %>%
count(region)
murders %>%
group_by(region) %>%
summarise(cor((log10(population/10^6)),
log10(total),
method = "pearson"))
#Modelo de regresión lineal
modelo <- murders %>%
#filter(region == "Northeast") %>%
lm(log10(total) ~ log10((population/10^6)),data= .)
summary <- summary(modelo);summary
modelo$coefficients
##Coeficientes
Pendiente <- modelo$coefficients[2];Pendiente
Intercepto <- modelo$coefficients[1];Intercepto
murders %>%
#filter(region == "Northeast") %>%
ggplot(aes(x = log10(population/10^6),
y = log10(total))) +
geom_point(show.legend = FALSE)+
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in regions in 2010") +
geom_smooth(method = "lm", se = FALSE, color = "green") +
geom_smooth(method = "loess")+
theme_light() +
geom_text(aes(label = paste("y =",
round(Pendiente, 2),
"x +",
round(Intercepto, 2)) ,
x = 0.1, y = 2.8) ,color = "black",size = 5)
modelo_lineal <- lm(default ~ balance, data = Default)
# Variable dependiente o Y= default
# Variabe independiente o X = balance
# Representación gráfica del modelo.
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1)
#Incluyendo la recta del modelo lineal
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")+
theme_light() +
geom_text(aes(label = paste("y =",
round(Pendiente, 2),
"x +",
round(Intercepto, 2)) ,
x = 0.1, y = 2.8) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")+
theme_light() +
geom_text(aes(label = paste("y =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 0.1, y = 2.8) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")+
#Realizar una predicción para alguien con balance=10000
predict(object = modelo_lineal,
newdata = data.frame(balance = 10000))
#Incluyendo la recta del modelo lineal
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "lm", color = "gray20", se = FALSE) +
theme_bw()  +
labs(title = "Regresión lineal por mínimos cuadrados",
y = "Probabilidad default") +
theme(legend.position = "none")
#Realizar una predicción para alguien con balance=10000
predict(object = modelo_lineal,
newdata = data.frame(balance = 10000))
# Ajuste de un modelo logístico.
modelo_logistico <- glm(default ~ balance,
data = Default,
family = "binomial")
# Representación gráfica del modelo.
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
stat_function(fun = function(x){predict(modelo_logistico,
newdata = data.frame(balance = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad default") +
theme(legend.position = "none")
ary <- summary(modelo_logistico)
summary
Intercepto <- summary$coefficients[1,1];Intercepto
Pendiente <- summary$coefficients[2,1];Pendient
summary <- summary(modelo_logistico)
summary
Intercepto <- summary$coefficients[1,1];Intercepto
Pendiente <- summary$coefficients[2,1];Pendiente
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 0.1, y = 2.8) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 5, y = 1) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 50, y = 0.75) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 500, y = 0.75) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 700, y = 0.75) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 700, y = 1.5) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 5)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 4)
Intercepto <- summary$coefficients[1,1];Intercepto
Pendiente <- summary$coefficients[2,1];Pendiente
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 4)+
geom_text(aes(label = paste("ln(p/(1-p) =") ,
x = 900, y = 1.05) ,color = "black",size = 4)
ggplot(data = Default, aes(x = balance, y = default)) +
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 4)+
geom_text(aes(label = paste("Natalia Santamaria") ,
x = 2500, y = -0.05) ,color = "black",size = 4)
ggplot(data = Default, aes(x = balance, y = default)) +
ggtitle("Equipo 3")
ggplot(data = Default, aes(x = balance, y = default)) +
ggtitle("Equipo 3")+
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 4)+
geom_text(aes(label = paste("Natalia Santamaria") ,
x = 2500, y = -0.05) ,color = "black",size = 4)
ggplot(data = Default, aes(x = balance, y = default)) +
ggtitle("Gráfica ")+
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 4)+
geom_text(aes(label = "Natalia Santamaria" ,
x = 1500, y = -0.05) ,color = "black",size = 4)
ggplot(data = Default, aes(x = balance, y = default)) +
ggtitle("Gráfica ")+
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 4)+
geom_text(aes(label = "Natalia Santamaria" ,
x = 1500, y = -0.05) ,color = "black",size = 3)
modelo_logistico$coefficients
exp(modelo_logistico$coefficients)
exp(Pendiente)
exp(Intercepto)
head(modelo_logistico$fitted.values)
head(round(modelo_logistico$fitted.values,0),10)
#Clasificar según la probabilidad
#Elegir un punto de corte
Default$pred <- as.numeric(modelo_logistico$fitted.values>=0.5)
nuevos_datos <- data.frame(balance = c(100, 500,
1000, 1500,
2000, 2500))
# Realizar predicciones con el modelo logístico
predicciones <- predict(modelo_logistico,
newdata = nuevos_datos,
type = "response")
# Mostrar las predicciones
print(predicciones)
bral <- 0.5
clases_predichas <- ifelse(predicciones >= umbral, "Yes", "No")
umbral <- 0.5
clases_predichas <- ifelse(predicciones >= umbral, "Yes", "No")
print(clases_predichas)
ggplot(data = Default, aes(x = balance, y = default)) +
ggtitle("Gráfica ")+
geom_point(aes(color = as.factor(default)), shape = 1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
color = "gray20",
se = FALSE) +
theme_bw() +
theme(legend.position = "none")+
geom_text(aes(label = paste("ln(p/(1-p) =",
round(Pendiente, 1.5),
"x +",
round(Intercepto, 1.5)) ,
x = 900, y = 1.05) ,color = "black",size = 4)+
geom_text(aes(label = "Natalia Santamaria" ,
x = 1500, y = -0.05) ,color = "black",size = 3)
# Realizar predicciones con el modelo logístico
predicciones <- predict(modelo_logistico,
newdata = nuevos_datos,
type = "response")
# Mostrar las predicciones
print(predicciones)
df <- data.frame(modelo_logistico$fitted.values,Default$pred)
View(df)
View(Default)
install.packages("caret")
library(caret)
library(caret)
matriz <- confusionMatrix(Default$default,Default$pred)
Default$default
Default$pred
View(Default)
matriz <- confusionMatrix(Default$default,Default$pred)
a<-Default$default
b<-Default$pred
matriz <- confusionMatrix(a,b)
matriz <- confusionMatrix(as.factor(a),as.factor(b)
matriz <- confusionMatrix(as.factor(a),as.factor(b))
matriz <- confusionMatrix(as.factor(Default$default),as.factor(Default$pred))
matriz
draw_confusion_matrix(matriz)
matriz
library(dplyr)
library(readr)
library(ggthemes)
library(ggplot2)
library(cowplot)
library(forcats)
library(dslabs)
library(corrplot)
library(nortest)
#Carga de la base de datos
data_avo <- read.csv("avocado.csv")
#Carga de la base de datos
data_avo <- read.csv("avocado.csv")
setwd("C:/Users/Natalia/Desktop/PROYECTO FINAL")
library(dplyr)
library(readr)
library(ggthemes)
library(ggplot2)
library(cowplot)
library(forcats)
library(dslabs)
library(corrplot)
library(nortest)
#Carga de la base de datos
data_avo <- read.csv("avocado.csv")
data_avo$calculada_Venta= data_avo$AveragePrice*data_avo$Total.Volume
data_avo<-data_avo %>% filter(data_avo$region=="Boston",data_avo$region!="TotalUS",data_avo$region!="Total U.S.",data_avo$Total.Volume<=4500, data_avo$Total.Volume>=100)
#data_avo$region=="Boston"
data_avo %>%
group_by(region) %>%
summarise(cor((log10(Total.Volume/10^5)),
log10(calculada_Venta),
method = "pearson"))
modeloah <- data_avo %>%
lm(log10(calculada_Venta) ~ log10((Total.Volume/10^5)),data= .)
modeloah$coefficients
##Coeficientes
Pendiente <- modeloah$coefficients[2];
Intercepto <- modeloah$coefficients[1];
Pendiente
Intercepto
data_avo %>%
ggplot(aes(x = log10(Total.Volume/10^5),
y = log10(calculada_Venta))) +
geom_point(show.legend = FALSE)+
xlab("volumen in millions (log scale)") +
ylab("Total venta de aguacates (log scale)") +
ggtitle("cantidades vendidas todos los estados 2015-2019") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
theme_light() +
geom_text(aes(label = paste("y =",
round(Pendiente, 2),
"x +",
round(Intercepto, 2)),
x = -2, y = 3.1),color = "green",size = 8)
ei=residuals(modeloah);ei
pred=fitted(modeloah);pred
realah = data_avo %>%
summarize(y=log10(calculada_Venta),x=log10((Total.Volume/10^5))) %>%
arrange(x);realah1
View(realah)
